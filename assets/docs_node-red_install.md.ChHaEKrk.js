import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.BSxiluPM.js";const c=JSON.parse('{"title":"部署与启动","description":"","frontmatter":{},"headers":[],"relativePath":"docs/node-red/install.md","filePath":"docs/node-red/install.md","lastUpdated":1760599280000}'),t={name:"docs/node-red/install.md"};function n(h,s,d,p,o,k){return e(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="部署与启动" tabindex="-1">部署与启动 <a class="header-anchor" href="#部署与启动" aria-label="Permalink to &quot;部署与启动&quot;">​</a></h1><h2 id="一、node-red-运行机制" tabindex="-1">一、Node-RED 运行机制 <a class="header-anchor" href="#一、node-red-运行机制" aria-label="Permalink to &quot;一、Node-RED 运行机制&quot;">​</a></h2><p>Node-RED 的架构基于 <code>Node.js</code> 的事件驱动模型，核心由​运行时（<code>Runtime</code>）​、编辑器（<code>Editor</code>）和节点（<code>Nodes</code>）三部分组成，三者协同实现可视化流程编程与执行。​</p><ol><li><p>运行时（ <code>Runtime</code> ）：流程执行的 “大脑”​</p><ul><li><p>​核心功能​：负责加载节点、解析流程配置、管理节点间消息传递、处理事件触发，是流程运行的核心引擎。​</p></li><li><p>​技术细节​：​</p><ul><li>基于 Node.js 的EventEmitter模块实现事件监听与触发，确保消息处理的高效性与非阻塞性。​</li><li>采用 “流（<code>Flow</code>）” 作为流程的基本单位，每个流由多个节点和连接构成，运行时通过解析 JSON 格式的流配置文件，将节点实例化并建立消息路由。​</li><li>支持多流并行运行，不同流之间可通过 “链接节点（<code>Link Node</code>）” 或全局上下文（<code>Context</code>）实现数据交互。​</li></ul></li><li><p>​消息模型​：​</p><ul><li>节点间传递的消息为 <code>msg</code> 对象，默认包含 <code>msg.payload</code>（消息内容）和 <code>msg.topic</code>（消息主题），用户可自定义添加其他属性（如 <code>msg.timestamp</code>、<code>msg.source</code>）。​</li><li>消息传递支持 “一对一”“一对多”“多对一” 模式，例如一个 “注入节点” 可同时向多个 “函数节点” 发送消息。​</li></ul></li></ul></li><li><p>编辑器（ <code>Editor</code> ）：可视化开发的 “画布”​</p><ul><li><p>​核心功能​：提供基于浏览器的可视化界面，支持节点拖拽、连接配置、流程保存与部署，是用户与 Node-RED 交互的主要入口。​</p></li><li><p>​技术细节​：​</p><ul><li>编辑器与运行时通过 <code>WebSocket</code> 协议实时通信，实现 “部署即生效”：用户点击 “部署” 后，编辑器将流程配置 JSON 发送至运行时，运行时即时更新并执行流程，无需重启服务。​</li><li>支持 “工作区（ <code>Workspace</code> ）” 分区，可通过标签页切换不同流程，方便大型项目的模块化管理。​</li></ul></li></ul></li><li><p>节点（ <code>Nodes</code> ）：流程功能的 “积木”​</p><ul><li><p>​核心定位​：节点是封装特定功能的代码模块，是流程的基本功能单元，用户通过组合节点实现业务逻辑。​</p></li><li><p>​结构组成​：每个节点包含<code>html</code>（编辑器配置界面）、<code>js</code>（运行时逻辑）和<code>package.json</code>（元数据）三部分：​</p><ul><li><code>html</code>文件：定义节点在编辑器中的外观（图标、颜色）、配置项（如 API 密钥、端口号），通过<code>RED.nodes.registerType</code>注册节点类型。​</li><li><code>js</code>文件：实现节点的运行时逻辑，包括<code>on(&quot;input&quot;)</code>（接收输入消息触发）、<code>send()</code>（发送输出消息）等核心方法。​</li><li><code>package.json</code>：声明节点名称、版本、依赖（如<code>mqtt</code>库）、兼容的 Node-RED 版本等信息。</li></ul></li></ul></li></ol><h2 id="二、安装node-red" tabindex="-1">二、安装Node-Red <a class="header-anchor" href="#二、安装node-red" aria-label="Permalink to &quot;二、安装Node-Red&quot;">​</a></h2><h3 id="_2-1-安装nvm" tabindex="-1">2.1 安装NVM <a class="header-anchor" href="#_2-1-安装nvm" aria-label="Permalink to &quot;2.1 安装NVM&quot;">​</a></h3><p>这里以Linux系统为例，推荐使用<code>NVM</code>安装NodeJS，方便后续管理</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gitee.com/RubyMetric/nvm-cn/raw/main/install.sh)&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.nvm/nvm.sh</span></span></code></pre></div><h3 id="_2-2-安装nodejs" tabindex="-1">2.2 安装NodeJS <a class="header-anchor" href="#_2-2-安装nodejs" aria-label="Permalink to &quot;2.2 安装NodeJS&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v22.16.0</span></span></code></pre></div><h3 id="_2-3-安装node-red" tabindex="-1">2.3 安装Node-Red <a class="header-anchor" href="#_2-3-安装node-red" aria-label="Permalink to &quot;2.3 安装Node-Red&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unsafe-perm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-red</span></span></code></pre></div><h3 id="_2-4-node-red的自启动" tabindex="-1">2.4 Node-Red的自启动 <a class="header-anchor" href="#_2-4-node-red的自启动" aria-label="Permalink to &quot;2.4 Node-Red的自启动&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pm2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --node-args=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--max-old-space-size=1024&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #根据实际内存自行调整</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> startup</span></span></code></pre></div><h2 id="三、node-red的启动参数" tabindex="-1">三、Node-Red的启动参数 <a class="header-anchor" href="#三、node-red的启动参数" aria-label="Permalink to &quot;三、Node-Red的启动参数&quot;">​</a></h2><h3 id="_3-1-启动命令" tabindex="-1">3.1 启动命令 <a class="header-anchor" href="#_3-1-启动命令" aria-label="Permalink to &quot;3.1 启动命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-v] [-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] [--settings settings.js] [--userDir DIR]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         [--port PORT] [--title TITLE] [--safe] [flows.json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectName]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         [-D X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file]</span></span></code></pre></div><h3 id="_3-2-参数说明" tabindex="-1">3.2 参数说明 <a class="header-anchor" href="#_3-2-参数说明" aria-label="Permalink to &quot;3.2 参数说明&quot;">​</a></h3><ul><li><code>-p, --port PORT</code>：设置运行时监听的 TCP 端口。默认值： <code>1880</code></li><li><code>--safe</code>：启动 Node-RED 但不启动流程。当部署更改时，流程才会启动</li><li><code>-s, --settings FILE</code>：设置要使用的配置文件。默认： <code>settings.js</code>在 <code>userDir</code>中</li><li><code>--title TITLE</code>：设置进程窗口标题</li><li><code>-u, --userDir DIR</code>：设置要使用的用户目录。默认： <code>~/.node-red</code></li><li><code>-v</code>：启用详细输出</li><li><code>-D X=Y|@file</code>：覆盖单个设置</li><li><code>flows.json|projectName</code>：如果项目功能未启用，这将设置您要与之工作的流程文件。如果项目功能已启用，这将确定应启动哪个项目。</li><li><code>-?, --help</code>：显示命令行使用帮助并退出</li></ul><h3 id="_3-3-参数示例" tabindex="-1">3.3 参数示例 <a class="header-anchor" href="#_3-3-参数示例" aria-label="Permalink to &quot;3.3 参数示例&quot;">​</a></h3><h4 id="_3-1-启用详细输出" tabindex="-1">3.1 启用详细输出 <a class="header-anchor" href="#_3-1-启用详细输出" aria-label="Permalink to &quot;3.1 启用详细输出&quot;">​</a></h4><ul><li><p>​参数作用​：启动 Node-RED 时输出详细日志（如模块加载、配置读取等过程），用于调试问题。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div></li><li><p>​场景说明​：当 Node-RED 启动失败（如插件报错、端口占用）时，通过 <code>-v</code>查看详细日志，快速定位问题原因（例如 “某个节点模块缺失”“配置文件语法错误”）。</p></li></ul><h4 id="_3-2-显示帮助信息" tabindex="-1">3.2 显示帮助信息 <a class="header-anchor" href="#_3-2-显示帮助信息" aria-label="Permalink to &quot;3.2 显示帮助信息&quot;">​</a></h4><ul><li><p>​参数作用​：输出所有命令行参数的用法说明，无需启动 Node-RED，仅用于查询参数。</p></li><li><p>​命令示例​（两种写法均可）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法1：短参数 -?</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法2：长参数 --help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div></li><li><p>​场景说明​：忘记某个参数的作用时，直接执行该命令快速查阅，例如 “想不起用户目录参数是 <code>--userDir</code>还是 <code>--user</code>” 时，通过 <code>--help</code>确认。</p></li></ul><h3 id="_3-3-指定配置文件" tabindex="-1">3.3 指定配置文件 <a class="header-anchor" href="#_3-3-指定配置文件" aria-label="Permalink to &quot;3.3 指定配置文件&quot;">​</a></h3><ul><li><p>​参数作用​：不使用默认的 <code>settings.js</code>（默认在用户目录下），而是指定自定义的配置文件（如自定义节点路径、认证规则）。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设自定义配置文件存放在 /home/user/custom-node-red/settings-prod.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --settings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/custom-node-red/settings-prod.js</span></span></code></pre></div></li><li><p>​场景说明​：多环境部署时使用（如开发环境、生产环境），生产环境的 <code>settings-prod.js</code>可能关闭调试日志、启用 HTTPS，通过该参数快速切换配置。</p></li></ul><h4 id="_3-4-指定用户目录" tabindex="-1">3.4 指定用户目录 <a class="header-anchor" href="#_3-4-指定用户目录" aria-label="Permalink to &quot;3.4 指定用户目录&quot;">​</a></h4><ul><li><p>​参数作用​：自定义 Node-RED 的用户目录（默认是 <code>~/.node-red</code>，存放流程文件、插件、配置），实现多用户 / 多实例隔离。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为“设备监控”场景创建独立用户目录 /opt/node-red/device-monitor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --userDir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/node-red/device-monitor</span></span></code></pre></div></li><li><p>​场景说明​：同一台服务器需要运行多个 Node-RED 实例（如 “设备监控” 和 “数据采集”），通过 <code>--userDir</code>隔离各自的流程和插件，避免冲突。</p></li></ul><h4 id="_3-5-指定监听端口" tabindex="-1">3.5 指定监听端口 <a class="header-anchor" href="#_3-5-指定监听端口" aria-label="Permalink to &quot;3.5 指定监听端口&quot;">​</a></h4><ul><li><p>​参数作用​：设置 Node-RED 后台服务的 TCP 监听端口（默认是 <code>1880），解决端口占用问题或实现多实例端口区分。</code></p></li><li><p>​命令示例​（两种写法均可）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法1：短参数 -p，指定端口为 1881</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1881</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写法2：长参数 --port，指定端口为 1882（用于生产环境实例）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1882</span></span></code></pre></div></li><li><p>​场景说明​：默认端口 1880 已被其他服务占用，或需要运行两个 Node-RED 实例（分别用 1881 和 1882 端口）时，用该参数指定端口。</p></li></ul><h4 id="_3-6-设置进程窗口标题" tabindex="-1">3.6 设置进程窗口标题 <a class="header-anchor" href="#_3-6-设置进程窗口标题" aria-label="Permalink to &quot;3.6 设置进程窗口标题&quot;">​</a></h4><ul><li><p>​参数作用​：自定义 Node-RED 运行时的进程窗口标题（仅在终端 / 命令行窗口中显示），便于识别多实例进程。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为“车间温湿度监控”实例设置窗口标题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --title</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Node-RED - 车间温湿度监控&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1883</span></span></code></pre></div></li><li><p>​场景说明​：在终端中同时运行多个 Node-RED 实例时，默认窗口标题都是 “node-red”，通过 <code>--title</code>自定义标题（如 “车间温湿度监控”“设备故障报警”），可快速区分不同实例。</p></li></ul><h4 id="_3-7-安全模式启动" tabindex="-1">3.7 安全模式启动 <a class="header-anchor" href="#_3-7-安全模式启动" aria-label="Permalink to &quot;3.7 安全模式启动&quot;">​</a></h4><ul><li><p>​参数作用​：启动 Node-RED 但不自动运行已部署的流程，仅加载编辑器；需手动在编辑器中点击 “部署”，流程才会启动。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安全模式启动，避免流程启动时因错误导致崩溃</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --safe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1880</span></span></code></pre></div></li><li><p>​场景说明​：流程中存在错误（如 “MQTT 服务器地址写错”“函数节点语法错误”），直接启动可能导致 Node-RED 崩溃；用 <code>--safe</code>启动后，先在编辑器中修复错误，再部署运行流程，避免启动失败。</p></li></ul><h4 id="_3-8-指定流程文件或项目名" tabindex="-1">3.8 指定流程文件或项目名 <a class="header-anchor" href="#_3-8-指定流程文件或项目名" aria-label="Permalink to &quot;3.8 指定流程文件或项目名&quot;">​</a></h4><p>该参数分两种场景（取决于是否启用 “项目功能”），示例分别如下：</p><h5 id="场景-1-未启用项目功能-指定流程文件" tabindex="-1">场景 1：未启用项目功能（指定流程文件） <a class="header-anchor" href="#场景-1-未启用项目功能-指定流程文件" aria-label="Permalink to &quot;场景 1：未启用项目功能（指定流程文件）&quot;">​</a></h5><ul><li><p>​参数作用​：不使用默认的 flows_&lt;主机名&gt;.json（用户目录下），而是指定自定义的流程文件（如备份的旧流程、特定场景的流程）。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载备份的流程文件 /home/user/backups/node-red/flows-20240501.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/backups/node-red/flows-20240501.json</span></span></code></pre></div></li><li><p>​场景说明​：需要恢复历史备份的流程，或切换到另一个场景的流程（如 “工作日流程” 和 “节假日流程”），直接指定流程文件路径即可加载。</p></li></ul><h5 id="场景-2-已启用项目功能-指定项目名" tabindex="-1">场景 2：已启用项目功能（指定项目名） <a class="header-anchor" href="#场景-2-已启用项目功能-指定项目名" aria-label="Permalink to &quot;场景 2：已启用项目功能（指定项目名）&quot;">​</a></h5><ul><li><p>​参数作用​：Node-RED 启用 “项目功能” 后（需在编辑器中配置），通过项目名指定启动哪个项目（每个项目包含独立的流程、配置）。</p></li><li><p>​命令示例​：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动名为“智慧家居控制”的项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 智慧家居控制</span></span></code></pre></div></li><li><p>​场景说明​：启用项目功能后，多个项目的文件被统一管理（如 <code>Git</code> 版本控制），通过项目名快速启动目标项目，无需手动指定流程文件路径。</p></li></ul><h4 id="_3-9-覆盖单个配置" tabindex="-1">3.9 覆盖单个配置 <a class="header-anchor" href="#_3-9-覆盖单个配置" aria-label="Permalink to &quot;3.9 覆盖单个配置&quot;">​</a></h4><ul><li><p>​参数作用​：临时覆盖 settings.js中的某个配置（无需修改配置文件），支持 “单键值覆盖” 或 “通过文件批量覆盖”。</p></li><li><p>​命令示例​（两种用法）：</p><ol><li>​单键值覆盖​（如临时关闭编辑器访问限制）：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 覆盖 &quot;editorTheme.disableEdit&quot; 配置，允许编辑（默认可能为 false）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> editorTheme.disableEdit=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1880</span></span></code></pre></div><ol start="2"><li>​文件批量覆盖​（如通过 override.conf批量修改配置）：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先创建 override.conf 文件，内容为：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># editorTheme.title=临时测试环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># httpNode.auth.user=test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 再通过 -D @file 加载该文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node-red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @/home/user/node-red-override.conf</span></span></code></pre></div></li><li><p>​场景说明​：临时测试配置（如 “临时允许匿名访问编辑器”“临时修改 HTTP 节点的认证用户”），无需修改 <code>settings.js</code>，测试完成后直接删除参数即可恢复默认配置。</p></li></ul><h3 id="四、版本升级" tabindex="-1">四、版本升级 <a class="header-anchor" href="#四、版本升级" aria-label="Permalink to &quot;四、版本升级&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unsafe-perm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-red</span></span></code></pre></div>`,44)])])}const g=i(t,[["render",n]]);export{c as __pageData,g as default};
